from django.shortcuts import render, redirect, get_object_or_404from django.db.models import Sum, Q, Countfrom django.contrib import messagesfrom django.contrib.auth import login as auth_loginfrom django.contrib.auth.decorators import login_requiredfrom django.contrib.auth.forms import AuthenticationFormfrom django.forms import formset_factory, modelformset_factory  # Correct import for batch assignmentsfrom django.http import HttpResponseRedirect, HttpResponse, FileResponse, JsonResponsefrom django.utils import timezonefrom django import formsfrom datetime import datetime, timedeltafrom hr.forms import ManualTimeclockForm, SearchFilterForm, EmployeeDetailCertificationForm, ProfileEditForm, CertificationForm, EmployeeCertificationForm, JobsiteForm, SignUpForm, StaffMessageForm, BulkRenewTrainingFilterForm, EmploymentApplicationForm, SignatureForm, DocumentUploadForm, EmployeeFormUploadForm, EmployeeStatForm, TrainingRecordForm, HazardReportForm, SuggestionForm, TimeclockForm, TimeclockReportForm, CrewForm, CrewAssignmentForm, ProfilePictureFormfrom .models import EmploymentApplication, Certification, EmployeeCertification, Jobsite, Signature, Profile, User, ApplicantDocument, EmployeeForm, EmployeeStat, TrainingRecord, HazardReport, Suggestion, Timeclock, SubmissionToken, Crew, CrewAssignment, StaffMessagefrom reportlab.pdfgen import canvasfrom reportlab.lib.pagesizes import letterfrom django.conf import settingsfrom PIL import Imagefrom .tasks import send_application_email, resize_imageimport osimport csvimport loggingfrom io import BytesIOfrom urllib.parse import urlencodefrom django.urls import reversefrom django.db import IntegrityErrorlogger = logging.getLogger(__name__)@login_requireddef training_management(request):    if not request.user.is_staff:        return redirect('home')    CertificationFormSet = modelformset_factory(Certification, form=CertificationForm, extra=1, can_delete=True)    EmployeeCertificationFormSet = modelformset_factory(EmployeeCertification, form=EmployeeCertificationForm, extra=1, can_delete=True)    JobsiteFormSet = modelformset_factory(Jobsite, form=JobsiteForm, extra=1, can_delete=True)    today = timezone.now().date()    thirty_days_from_now = today + timezone.timedelta(days=30)    expiring_certs = EmployeeCertification.objects.filter(        expiration_date__gt=today,        expiration_date__lte=thirty_days_from_now,        dismissed=False    )    expired_certs = EmployeeCertification.objects.filter(        expiration_date__lte=today,        dismissed=False    )    jobsites = Jobsite.objects.all()    filter_form = SearchFilterForm(request.GET or None)    emp_certs_queryset = EmployeeCertification.objects.all()    if filter_form.is_valid():        state = filter_form.cleaned_data.get('state')        crew = filter_form.cleaned_data.get('crew')        employee_search = filter_form.cleaned_data.get('employee_search')        site = filter_form.cleaned_data.get('site')        if state:            emp_certs_queryset = emp_certs_queryset.filter(employee__employmentapplication__state=state)        if crew:            emp_certs_queryset = emp_certs_queryset.filter(employee__crew_assignments__crew=crew, employee__crew_assignments__end_date__isnull=True)        if employee_search:            emp_certs_queryset = emp_certs_queryset.filter(                Q(employee__first_name__icontains=employee_search) |                Q(employee__last_name__icontains=employee_search) |                Q(employee__username__icontains=employee_search)            )        if site:            emp_certs_queryset = emp_certs_queryset.filter(employee__timeclock__site=site).distinct()    if request.method == 'POST':        if 'dismiss_cert' in request.POST:            cert_id = request.POST.get('cert_id')            if cert_id:                EmployeeCertification.objects.filter(id=cert_id).update(dismissed=True)                messages.success(request, "Certification alert dismissed.")                return redirect('training_management')        elif 'save_certifications' in request.POST:            cert_formset = CertificationFormSet(request.POST, queryset=Certification.objects.all())            if cert_formset.is_valid():                cert_formset.save()                messages.success(request, "Certifications updated successfully!")                return redirect('training_management')        elif 'save_employee_certs' in request.POST:            emp_cert_formset = EmployeeCertificationFormSet(request.POST, queryset=emp_certs_queryset)            logger.debug(f"Full POST data: {dict(request.POST)}")            if emp_cert_formset.is_valid():                logger.debug(f"Formset cleaned data: {[form.cleaned_data for form in emp_cert_formset]}")                emp_cert_formset.save()                logger.info(f"Saved {emp_cert_formset.new_objects} new certifications")                messages.success(request, "Employee certifications updated successfully!")            else:                logger.error(f"Formset errors: {emp_cert_formset.errors}")                messages.error(request, "Failed to save employee certifications. Check the form for errors.")            return redirect('training_management')        elif 'save_jobsites' in request.POST:            jobsite_formset = JobsiteFormSet(request.POST, queryset=Jobsite.objects.all())            if jobsite_formset.is_valid():                jobsite_formset.save()                messages.success(request, "Jobsites updated successfully!")                return redirect('training_management')        elif 'renew_certification' in request.POST:            cert_id = request.POST.get('certification_id')            new_expiration_date = request.POST.get('new_expiration_date')            if cert_id and new_expiration_date:                try:                    certification = EmployeeCertification.objects.get(id=cert_id)                    certification.expiration_date = new_expiration_date                    certification.save()                    logger.debug(f"Certification {cert_id} renewed to {new_expiration_date}")                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':                        return JsonResponse({                            'success': True,                            'new_expiration_date': new_expiration_date                        })                    messages.success(request, "Certification renewed successfully!")                except EmployeeCertification.DoesNotExist:                    logger.error(f"Certification {cert_id} not found")                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':                        return JsonResponse({'success': False, 'error': 'Certification not found.'}, status=404)                    messages.error(request, "Certification not found.")                except ValueError:                    logger.error(f"Invalid expiration date: {new_expiration_date}")                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':                        return JsonResponse({'success': False, 'error': 'Invalid expiration date.'}, status=400)                    messages.error(request, "Invalid expiration date.")                return redirect('training_management')            else:                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':                    return JsonResponse({'success': False, 'error': 'Missing certification ID or expiration date.'}, status=400)                messages.error(request, "Please provide a new expiration date.")    cert_formset = CertificationFormSet(queryset=Certification.objects.all())    emp_cert_formset = EmployeeCertificationFormSet(queryset=emp_certs_queryset)    jobsite_formset = JobsiteFormSet(queryset=Jobsite.objects.all())    search_jobsite = request.GET.get('jobsite', '')    qualified_employees = []    partial_qualified = []    if search_jobsite:        jobsite = Jobsite.objects.filter(name=search_jobsite).first()        if jobsite:            required_certs = jobsite.required_certifications.all()            required_cert_count = required_certs.count()            # Fully qualified: has all required certs, none expired            qualified_employees = User.objects.annotate(                valid_cert_count=Count(                    'employeecertification',                    filter=Q(employeecertification__certification__in=required_certs) &                           Q(employeecertification__expiration_date__gt=today) |                           Q(employeecertification__expiration_date__isnull=True)                )            ).filter(                valid_cert_count=required_cert_count            ).distinct()            # All employees with any required certs (for partial qualification)            all_employees_with_certs = User.objects.filter(                employeecertification__certification__in=required_certs            ).distinct()                        # Partially qualified: has some certs, but not all valid or missing some            partial_qualified_qs = all_employees_with_certs.annotate(                valid_cert_count=Count(                    'employeecertification',                    filter=Q(employeecertification__certification__in=required_certs) &                           Q(employeecertification__expiration_date__gt=today) |                           Q(employeecertification__expiration_date__isnull=True)                )            ).filter(                valid_cert_count__lt=required_cert_count            ).order_by('-valid_cert_count')[:5]            partial_qualified = []            for emp in partial_qualified_qs:                emp_certs = emp.employeecertification_set.filter(                    certification__in=required_certs                )                valid_certs = emp_certs.filter(                    Q(expiration_date__gt=today) | Q(expiration_date__isnull=True)                ).values_list('certification', flat=True)                expired_certs = emp_certs.filter(                    expiration_date__lte=today                ).exclude(                    expiration_date__isnull=True                )                missing_certs = required_certs.exclude(id__in=valid_certs)                has_site_specific = not jobsite.site_specific_training or emp.employeecertification_set.filter(                    certification__in=required_certs,                    certification__is_site_specific=True,                    expiration_date__gt=today                ).exists()                partial_qualified.append((emp, missing_certs, expired_certs, has_site_specific))    context = {        'cert_formset': cert_formset,        'emp_cert_formset': emp_cert_formset,        'jobsite_formset': jobsite_formset,        'expiring_certs': expiring_certs,        'expired_certs': expired_certs,        'jobsites': jobsites,        'search_jobsite': search_jobsite,        'qualified_employees': qualified_employees,        'partial_qualified': partial_qualified,        'today': today,        'filter_form': filter_form,    }    return render(request, 'hr/training_management.html', context)def leader_or_staff_required(view_func):    @login_required    def wrapper(request, *args, **kwargs):        if not (request.user.is_staff or (hasattr(request.user, 'profile') and request.user.profile.is_crew_leader)):            return redirect('home')        return view_func(request, *args, **kwargs)    return wrapper@leader_or_staff_requireddef manage_perdiems(request):    perdiems = PerDiem.objects.all()    form = PerDiemForm(request.POST or None)        if request.method == 'POST' and form.is_valid():        perdiem = form.save(commit=False)        perdiem.assigned_by = request.user        perdiem.save()        messages.success(request, f"Per diem assigned to {perdiem.employee.username}!")        return redirect('manage_perdiems')        # Filter for crew leaders to see only their crew    if not request.user.is_staff:        perdiems = perdiems.filter(employee__crew_assignments__crew__leader=request.user,                                  employee__crew_assignments__end_date__isnull=True).distinct()        return render(request, 'hr/manage_perdiems.html', {        'perdiems': perdiems,        'form': form,    })@leader_or_staff_requireddef manage_auto_expenses(request):    auto_expenses = AutomobileExpense.objects.all()    form = AutomobileExpenseForm(request.POST or None)        if request.method == 'POST' and form.is_valid():        expense = form.save(commit=False)        expense.assigned_by = request.user        expense.save()        messages.success(request, f"Auto expense assigned to {expense.employee.username}!")        return redirect('manage_auto_expenses')        # Filter for crew leaders    if not request.user.is_staff:        auto_expenses = auto_expenses.filter(employee__crew_assignments__crew__leader=request.user,                                            employee__crew_assignments__end_date__isnull=True).distinct()        return render(request, 'hr/manage_auto_expenses.html', {        'auto_expenses': auto_expenses,        'form': form,    })def signup(request):    if request.method == 'POST':        form = SignUpForm(request.POST, request.FILES)        if form.is_valid():            form.save()            return redirect('login')    else:        form = SignUpForm()    return render(request, 'hr/signup.html', {'form': form})def custom_login(request):    if request.method == 'POST':        form = AuthenticationForm(request, data=request.POST)        if form.is_valid():            user = form.get_user()            auth_login(request, user)            return redirect('staff_dashboard' if user.is_staff else 'home')    else:        form = AuthenticationForm()    return render(request, 'registration/login.html', {'form': form})@login_requireddef user_upload_document(request):    if not request.user.profile.can_upload_documents:        return redirect('home')    if request.method == 'POST':        form = DocumentUploadForm(request.POST, request.FILES)        if form.is_valid():            doc = form.save(commit=False)            doc.application = EmploymentApplication.objects.get(user=request.user)            doc.save()            return redirect('home')    else:        form = DocumentUploadForm()    return render(request, 'hr/user_upload_document.html', {'form': form})@login_requireddef manage_crews(request):    if not request.user.is_staff:        return redirect('home')    crew_form = CrewForm(request.POST or None)    AssignmentFormSet = formset_factory(CrewAssignmentForm, extra=1, can_delete=True)    crews = Crew.objects.all()    users = User.objects.filter(profile__is_employee=True, profile__is_active=True)    # Initialize formset with existing assignments per crew    crew_assignments = {crew.id: list(crew.assignments.all()) for crew in crews}    formsets = {crew.id: AssignmentFormSet(initial=[{'employee': a.employee, 'is_temporary': a.is_temporary, 'end_date': a.end_date} for a in crew_assignments[crew.id]], prefix=f'crew_{crew.id}') for crew in crews}    crew_name = request.GET.get('crew_name', '').strip()    leader_name = request.GET.get('leader_name', '').strip()    if crew_name:        crews = crews.filter(name__icontains=crew_name)    if leader_name:        crews = crews.filter(            Q(leader__first_name__icontains=leader_name) |            Q(leader__last_name__icontains=leader_name)        )    if request.method == 'POST':        logger.debug(f"POST data received: {request.POST}")        if 'create_crew' in request.POST:            if crew_form.is_valid():                try:                    crew = crew_form.save()                    messages.success(request, "Crew created successfully!")                    return redirect('manage_crews')                except IntegrityError as e:                    logger.error(f"IntegrityError on crew creation: {str(e)}")                    messages.error(request, "Error creating crew: " + str(e))            else:                logger.warning(f"Crew form invalid: {crew_form.errors}")                messages.error(request, "Crew form errors: " + str(crew_form.errors))                elif 'edit_crew' in request.POST:            crew_id = request.POST.get('crew_id')            crew = Crew.objects.get(id=crew_id)            edit_form = CrewForm(request.POST, instance=crew)            if edit_form.is_valid():                changed_data = edit_form.cleaned_data                for field, value in changed_data.items():                    if field in request.POST and value is not None and value != '':                        setattr(crew, field, value)                try:                    crew.save()                    messages.success(request, "Crew updated successfully!")                    return redirect('manage_crews')                except IntegrityError as e:                    logger.error(f"IntegrityError on crew edit: {str(e)}")                    messages.error(request, "Error updating crew: " + str(e))            else:                logger.warning(f"Crew form invalid: {edit_form.errors}")                messages.error(request, "Crew form errors: " + str(edit_form.errors))                elif 'edit_leader' in request.POST:            crew_id = request.POST.get('crew_id')            leader_id = request.POST.get('leader')            crew = Crew.objects.get(id=crew_id)            crew.leader = User.objects.get(id=leader_id) if leader_id else None            crew.save()            messages.success(request, "Crew leader updated successfully!")            return redirect('manage_crews')                elif 'save_assignments' in request.POST:            crew_id = request.POST.get('crew_id')            crew = Crew.objects.get(id=crew_id)            formset = AssignmentFormSet(request.POST, prefix=f'crew_{crew_id}')            if formset.is_valid():                # Log formset data for debugging                logger.debug(f"Formset data: {[(form.cleaned_data.get('employee'), form.cleaned_data.get('delete')) for form in formset]}")                # Clear existing assignments                CrewAssignment.objects.filter(crew=crew).delete()                # Save new assignments                seen_employees = set()                for form in formset:                    employee = form.cleaned_data.get('employee')                    delete = form.cleaned_data.get('delete', False)                    if delete and employee:                        logger.info(f"Skipped saving {employee.username} due to delete flag for crew {crew.name}")                        continue                    if employee and employee not in seen_employees:                        assignment = form.save(commit=False)                        assignment.crew = crew                        assignment.assigned_by = request.user                        if not assignment.is_temporary:                            assignment.is_temporary = False                        if not assignment.end_date:                            assignment.end_date = None                        assignment.save()                        seen_employees.add(employee)                        logger.info(f"Saved {employee.username} to crew {crew.name}")                logger.info(f"Saved assignments for crew {crew.name}")                messages.success(request, "Crew assignments updated successfully!")            else:                logger.warning(f"Formset invalid for crew {crew_id}: {formset.errors}")                messages.error(request, "Failed to save assignments: " + str(formset.errors))            return redirect('manage_crews')    return render(request, 'hr/manage_crews.html', {        'crew_form': crew_form,        'formsets': formsets,        'crews': crews,        'users': users,    })@login_requireddef staff_dashboard(request):    if not request.user.is_staff:        return redirect('home')    filter_form = SearchFilterForm(request.GET or None)    today = timezone.now().date()    thirty_days_from_now = today + timezone.timedelta(days=30)    # Base querysets (no slicing yet)    employees = User.objects.filter(is_active=True, profile__is_employee=True)    applicants = User.objects.filter(        employmentapplication__isnull=False,        profile__is_employee=False    ).distinct()    expiring_certs = EmployeeCertification.objects.filter(        expiration_date__gt=today,        expiration_date__lte=thirty_days_from_now,        dismissed=False    )    expired_certs = EmployeeCertification.objects.filter(        expiration_date__lte=today,        dismissed=False    )    recent_hazards = HazardReport.objects.filter(is_silenced=False).order_by('-reported_at')    recent_suggestions = Suggestion.objects.filter(is_silenced=False).order_by('-submitted_at')    # Apply filters    if filter_form.is_valid():        state = filter_form.cleaned_data.get('state')        crew = filter_form.cleaned_data.get('crew')        employee_search = filter_form.cleaned_data.get('employee_search')        site = filter_form.cleaned_data.get('site')        if state:            employees = employees.filter(crew_assignments__crew__state=state)            applicants = applicants.filter(crew_assignments__crew__state=state)            expiring_certs = expiring_certs.filter(employee__crew_assignments__crew__state=state)            expired_certs = expired_certs.filter(employee__crew_assignments__crew__state=state)            recent_hazards = recent_hazards.filter(user__crew_assignments__crew__state=state)            recent_suggestions = recent_suggestions.filter(user__crew_assignments__crew__state=state)        if crew:            employees = employees.filter(crew_assignments__crew=crew, crew_assignments__end_date__isnull=True)            expiring_certs = expiring_certs.filter(employee__crew_assignments__crew=crew, employee__crew_assignments__end_date__isnull=True)            expired_certs = expired_certs.filter(employee__crew_assignments__crew=crew, employee__crew_assignments__end_date__isnull=True)            recent_hazards = recent_hazards.filter(user__crew_assignments__crew=crew, user__crew_assignments__end_date__isnull=True)            recent_suggestions = recent_suggestions.filter(user__crew_assignments__crew=crew, user__crew_assignments__end_date__isnull=True)        if employee_search:            search_query = Q(first_name__icontains=employee_search) | Q(last_name__icontains=employee_search) | Q(username__icontains=employee_search)            employees = employees.filter(search_query)            applicants = applicants.filter(search_query)            expiring_certs = expiring_certs.filter(employee__in=User.objects.filter(search_query))            expired_certs = expired_certs.filter(employee__in=User.objects.filter(search_query))            recent_hazards = recent_hazards.filter(user__in=User.objects.filter(search_query))            recent_suggestions = recent_suggestions.filter(user__in=User.objects.filter(search_query))        if site:            employees = employees.filter(timeclock__site=site).distinct()            applicants = applicants.filter(timeclock__site=site).distinct()            expiring_certs = expiring_certs.filter(employee__timeclock__site=site).distinct()            expired_certs = expired_certs.filter(employee__timeclock__site=site).distinct()            recent_hazards = recent_hazards.filter(user__timeclock__site=site).distinct()            recent_suggestions = recent_suggestions.filter(user__timeclock__site=site).distinct()    # Apply slicing after filtering    recent_hazards = recent_hazards[:5]    recent_suggestions = recent_suggestions[:5]    # Handle POST requests    if request.method == 'POST':        if 'dismiss_cert' in request.POST:            cert_id = request.POST.get('cert_id')            if cert_id:                EmployeeCertification.objects.filter(id=cert_id).update(dismissed=True)                return redirect('staff_dashboard')        elif 'silence_hazard' in request.POST:            hazard_id = request.POST.get('hazard_id')            try:                hazard = HazardReport.objects.get(id=hazard_id)                hazard.is_silenced = True                hazard.save()                messages.success(request, f"Hazard Report {hazard_id} silenced.")            except HazardReport.DoesNotExist:                messages.error(request, "Hazard report not found.")            return redirect('staff_dashboard')        elif 'silence_suggestion' in request.POST:            suggestion_id = request.POST.get('suggestion_id')            try:                suggestion = Suggestion.objects.get(id=suggestion_id)                suggestion.is_silenced = True                suggestion.save()                messages.success(request, f"Suggestion {suggestion_id} silenced.")            except Suggestion.DoesNotExist:                messages.error(request, "Suggestion not found.")            return redirect('staff_dashboard')    context = {        'filter_form': filter_form,        'employees': employees,        'applicants': applicants,        'expiring_certs': expiring_certs,        'expired_certs': expired_certs,        'recent_hazards': recent_hazards,        'recent_suggestions': recent_suggestions,    }    return render(request, 'hr/staff_dashboard.html', context)@login_requireddef timeclock(request):    logger = logging.getLogger(__name__)    try:        if not request.user.is_staff and (not request.user.profile.is_employee or not request.user.profile.is_active):            logger.info(f"User {request.user.username} denied access to timeclock - not an active employee")            return redirect('home')        latest_entry = Timeclock.objects.filter(user=request.user).order_by('-recorded_at').first()        is_clocked_in = latest_entry and not latest_entry.clock_out        is_leader = request.user.led_crews.exists() or (hasattr(request.user, 'profile') and request.user.profile.is_crew_leader)        crew_members_data = []        total_hours_list = []  # Changed to list of (user, hours) tuples        default_start_date = timezone.now() - timedelta(days=30)        if is_leader:            crew_members = User.objects.filter(                crew_assignments__crew__leader=request.user,                crew_assignments__end_date__isnull=True            ).distinct()            for member in crew_members:                latest = Timeclock.objects.filter(user=member).order_by('-recorded_at').first()                crew_members_data.append({                    'member': member,                    'latest': latest,                    'is_clocked_in': latest and not latest.clock_out                })                entries = Timeclock.objects.filter(                    user=member,                    clock_in__gte=default_start_date,                    clock_out__isnull=False                )                total_hours = sum(entry.hours_worked() or 0 for entry in entries)                total_hours_list.append((member, total_hours))        else:            entries = Timeclock.objects.filter(                user=request.user,                clock_in__gte=default_start_date,                clock_out__isnull=False            )            total_hours = sum(entry.hours_worked() or 0 for entry in entries)            total_hours_list.append((request.user, total_hours))        form = TimeclockForm(request.POST or None, user=request.user)        if request.method == 'POST':            if 'save_all' in request.POST and is_leader:                entry_ids = [int(k.split('[')[1].split(']')[0]) for k in request.POST.keys() if k.startswith('clock_in[')]                delete_ids = [int(k.split('[')[1].split(']')[0]) for k in request.POST.keys() if k.startswith('delete[')]                Timeclock.objects.filter(id__in=delete_ids).delete()                for entry in Timeclock.objects.filter(id__in=entry_ids):                    if str(entry.id) not in delete_ids and entry.user in crew_members:                        new_clock_in_str = request.POST.get(f'clock_in[{entry.id}]')                        new_clock_out_str = request.POST.get(f'clock_out[{entry.id}]')                        if new_clock_in_str:                            entry.clock_in = timezone.make_aware(datetime.strptime(new_clock_in_str, '%Y-%m-%dT%H:%M'))                        if new_clock_out_str:                            entry.clock_out = timezone.make_aware(datetime.strptime(new_clock_out_str, '%Y-%m-%dT%H:%M'))                        elif new_clock_out_str == '':                            entry.clock_out = None                        entry.hours_type = request.POST.get(f'hours_type[{entry.id}]', 'regular')                        entry.shift = request.POST.get(f'shift[{entry.id}]', '')                        entry.wc_code = request.POST.get(f'wc_code[{entry.id}]', '')                        entry.task_code = request.POST.get(f'task_code[{entry.id}]', '')                        entry.job_id = request.POST.get(f'job_id[{entry.id}]', '')                        entry.phase = request.POST.get(f'phase[{entry.id}]', '')                        entry.project_no = request.POST.get(f'project_no[{entry.id}]', '')                        entry.tkt_no = request.POST.get(f'tkt_no[{entry.id}]', '')                        perdiem = request.POST.get(f'perdiem[{entry.id}]')                        entry.perdiem = float(perdiem) if perdiem else None                        entry.location = request.POST.get(f'location[{entry.id}]', '')                        supervisor_id = request.POST.get(f'supervisor[{entry.id}]')                        entry.supervisor = User.objects.get(id=supervisor_id) if supervisor_id else None                        entry.non_bill = request.POST.get(f'non_bill[{entry.id}]', '')                        entry.invoice_no = request.POST.get(f'invoice_no[{entry.id}]', '')                        entry.dept = request.POST.get(f'dept[{entry.id}]', '')                        entry.notes = request.POST.get(f'notes[{entry.id}]', '')                        entry.save()                return redirect('timeclock')            elif form.is_valid():                if 'employee_id' in request.POST and is_leader:                    employee = User.objects.get(id=request.POST['employee_id'])                    latest_employee_entry = Timeclock.objects.filter(user=employee).order_by('-recorded_at').first()                    is_employee_clocked_in = latest_employee_entry and not latest_employee_entry.clock_out                    if is_employee_clocked_in:                        latest_employee_entry.clock_out = timezone.now()                        latest_employee_entry.save()                    else:                        entry = form.save(commit=False)                        entry.user = employee                        entry.clock_in = timezone.now()                        entry.recorded_by = request.user                        entry.save()                else:                    if is_clocked_in:                        latest_entry.clock_out = timezone.now()                        latest_entry.save()                    else:                        entry = form.save(commit=False)                        entry.user = request.user                        entry.clock_in = timezone.now()                        entry.recorded_by = request.user                        entry.save()                return redirect('timeclock')        crew_timeclock_entries = []        users = User.objects.filter(Q(is_staff=True) | Q(profile__is_crew_leader=True))        if is_leader:            crew_timeclock_entries = Timeclock.objects.filter(                user__crew_assignments__crew__leader=request.user,                user__crew_assignments__end_date__isnull=True            ).order_by('-recorded_at')        return render(request, 'hr/timeclock.html', {            'form': form,            'is_clocked_in': is_clocked_in,            'is_leader': is_leader,            'crew_members_data': crew_members_data,            'crew_timeclock_entries': crew_timeclock_entries,            'users': users,            'total_hours_list': total_hours_list,            'default_start_date': default_start_date.date(),        })    except Exception as e:        logger.error(f"Timeclock view failed: {str(e)}")        raise@login_requireddef timeclock_report(request):    if not (request.user.is_staff or (hasattr(request.user, 'profile') and request.user.profile.is_crew_leader)):        logger.info(f"User {request.user.username} redirected to home - not authorized")        return redirect('home')    crews = Crew.objects.filter(leader=request.user) if not request.user.is_staff else Crew.objects.all()    sites = Jobsite.objects.all()  # Corrected from Site to Jobsite    users = User.objects.filter(Q(is_staff=True) | Q(profile__is_crew_leader=True))    # Initialize forms    filter_form = SearchFilterForm(request.POST or request.GET or None)    manual_form = ManualTimeclockForm(request.POST or None)  # New manual entry form    timeclock_entries = None    total_hours_list = []    start_date = request.GET.get('start_date') or (filter_form.is_valid() and filter_form.cleaned_data.get('start_date'))    end_date = request.GET.get('end_date') or (filter_form.is_valid() and filter_form.cleaned_data.get('end_date'))    is_filtered = False    if request.method == "POST":        # Handle manual entry        if 'add_manual_entry' in request.POST and request.user.is_staff:            if manual_form.is_valid():                entry = manual_form.save(commit=False)                entry.recorded_by = request.user                entry.recorded_at = timezone.now()                entry.save()                logger.info(f"Manual timeclock entry added by {request.user.username} for {entry.user.username}")                return redirect('timeclock_report')        # Existing save_all logic        elif 'save_all' in request.POST and request.user.is_staff:            logger.info("Processing save_all")            entry_ids = [int(k.split('[')[1].split(']')[0]) for k in request.POST.keys() if k.startswith('clock_in[')]            delete_ids = [int(k.split('[')[1].split(']')[0]) for k in request.POST.keys() if k.startswith('delete[')]            Timeclock.objects.filter(id__in=delete_ids).delete()            for entry in Timeclock.objects.filter(id__in=entry_ids):                if str(entry.id) not in delete_ids:                    new_clock_in_str = request.POST.get(f'clock_in[{entry.id}]')                    new_clock_out_str = request.POST.get(f'clock_out[{entry.id}]')                    crew_id = request.POST.get(f'crew[{entry.id}]')                    site_id = request.POST.get(f'site[{entry.id}]')                    if new_clock_in_str:                        entry.clock_in = timezone.make_aware(datetime.strptime(new_clock_in_str, '%Y-%m-%dT%H:%M'))                    if new_clock_out_str:                        entry.clock_out = timezone.make_aware(datetime.strptime(new_clock_out_str, '%Y-%m-%dT%H:%M'))                    elif new_clock_out_str == '':                        entry.clock_out = None                    entry.crew = Crew.objects.get(id=crew_id) if crew_id else None                    entry.site = Jobsite.objects.get(id=site_id) if site_id else None  # Corrected to Jobsite                    entry.hours_type = request.POST.get(f'hours_type[{entry.id}]', 'regular')                    entry.shift = request.POST.get(f'shift[{entry.id}]', '')                    entry.wc_code = request.POST.get(f'wc_code[{entry.id}]', '')                    entry.task_code = request.POST.get(f'task_code[{entry.id}]', '')                    entry.job_id = request.POST.get(f'job_id[{entry.id}]', '')                    entry.phase = request.POST.get(f'phase[{entry.id}]', '')                    entry.project_no = request.POST.get(f'project_no[{entry.id}]', '')                    entry.tkt_no = request.POST.get(f'tkt_no[{entry.id}]', '')                    entry.perdiem = request.POST.get(f'perdiem[{entry.id}]') or None                    entry.location = request.POST.get(f'location[{entry.id}]', '')                    supervisor_id = request.POST.get(f'supervisor[{entry.id}]')                    if supervisor_id:                        entry.supervisor = User.objects.get(id=supervisor_id)                    elif entry.crew and entry.crew.leader:                        entry.supervisor = entry.crew.leader                    else:                        entry.supervisor = None                    entry.non_bill = request.POST.get(f'non_bill[{entry.id}]', '')                    entry.invoice_no = request.POST.get(f'invoice_no[{entry.id}]', '')                    entry.dept = request.POST.get(f'dept[{entry.id}]', '')                    entry.notes = request.POST.get(f'notes[{entry.id}]', '')                    entry.save()            return redirect('timeclock_report')        # Existing export_csv and filter logic        elif 'export_csv' in request.POST and filter_form.is_valid():            filename = request.POST.get('csv_filename', 'timeclock_report')            if not filename.endswith('.csv'):                filename += '.csv'            params = {}            if filter_form.cleaned_data.get('start_date'):                params['start_date'] = filter_form.cleaned_data['start_date'].strftime('%Y-%m-%d')            if filter_form.cleaned_data.get('end_date'):                params['end_date'] = filter_form.cleaned_data['end_date'].strftime('%Y-%m-%d')            if filter_form.cleaned_data.get('state'):                params['state'] = filter_form.cleaned_data['state']            if filter_form.cleaned_data.get('crew'):                params['crew'] = filter_form.cleaned_data['crew'].id            if filter_form.cleaned_data.get('employee_search'):                params['employee_search'] = filter_form.cleaned_data['employee_search']            if filter_form.cleaned_data.get('site'):                params['site'] = filter_form.cleaned_data['site'].id            params['filename'] = filename            url = reverse('export_timeclock_csv') + '?' + urlencode(params, doseq=True)            return redirect(url)        elif filter_form.is_valid():            logger.info("Form valid, applying filters")            params = {}            if request.POST.get('start_date'):                params['start_date'] = request.POST['start_date']            if request.POST.get('end_date'):                params['end_date'] = request.POST['end_date']            if filter_form.cleaned_data.get('state'):                params['state'] = filter_form.cleaned_data['state']            if filter_form.cleaned_data.get('crew'):                params['crew'] = filter_form.cleaned_data['crew'].id            if filter_form.cleaned_data.get('employee_search'):                params['employee_search'] = filter_form.cleaned_data['employee_search']            if filter_form.cleaned_data.get('site'):                params['site'] = filter_form.cleaned_data['site'].id            url = reverse('timeclock_report') + '?' + urlencode(params)            return redirect(url)    # Apply filters for GET requests    if request.GET and filter_form.is_valid():        logger.debug(f"GET params: {request.GET}")        queryset = Timeclock.objects.all()        state = filter_form.cleaned_data.get('state')        crew = filter_form.cleaned_data.get('crew')        employee_search = filter_form.cleaned_data.get('employee_search')        site = filter_form.cleaned_data.get('site')        start_date = request.GET.get('start_date')        end_date = request.GET.get('end_date')        if state:            queryset = queryset.filter(user__employmentapplication__state=state)            is_filtered = True        if crew:            queryset = queryset.filter(user__crew_assignments__crew=crew, user__crew_assignments__end_date__isnull=True)            is_filtered = True        if employee_search:            queryset = queryset.filter(                Q(user__first_name__icontains=employee_search) |                Q(user__last_name__icontains=employee_search) |                Q(user__username__icontains=employee_search)            )            is_filtered = True        if site:            queryset = queryset.filter(site=site).distinct()  # Jobsite, not Site            is_filtered = True        if start_date and end_date:            queryset = queryset.filter(                clock_in__date__gte=start_date,                clock_in__date__lte=end_date            )            is_filtered = True        if not request.user.is_staff:            queryset = queryset.filter(                Q(user__crew_assignments__crew__leader=request.user) & Q(user__crew_assignments__end_date__isnull=True)            ).distinct()        if is_filtered:            timeclock_entries = queryset.order_by('-clock_in')            logger.debug(f"Filtered entries count: {timeclock_entries.count()}")            employee_hours = {}            for entry in timeclock_entries:                if entry.clock_out:                    hours = entry.hours_worked()                    if hours is not None:                        user_id = entry.user.id                        employee_hours[user_id] = employee_hours.get(user_id, 0) + hours            for user_id, hours in employee_hours.items():                user = User.objects.get(id=user_id)                total_hours_list.append((user, hours))    return render(request, 'hr/timeclock_report.html', {        'filter_form': filter_form,        'manual_form': manual_form,  # Pass manual form to template        'timeclock_entries': timeclock_entries,        'start_date': start_date,        'end_date': end_date,        'crews': crews,        'sites': sites,        'users': users,        'total_hours_list': total_hours_list,        'is_filtered': is_filtered,    })@login_requireddef export_timeclock_csv(request):    if not (request.user.is_staff or (hasattr(request.user, 'profile') and request.user.profile.is_crew_leader)):        return redirect('home')    # Retrieve query parameters    start_date = request.GET.get('start_date')    end_date = request.GET.get('end_date')    state = request.GET.get('state')    crew_id = request.GET.get('crew')    employee_search = request.GET.get('employee_search', '')    site_id = request.GET.get('site')    filename = request.GET.get('filename', 'timeclock_report.csv')    # Apply filters to queryset    queryset = Timeclock.objects.all()    if start_date and end_date:        queryset = queryset.filter(            clock_in__date__gte=start_date,            clock_in__date__lte=end_date        )    if state:        queryset = queryset.filter(user__employmentapplication__state=state)    if crew_id:        queryset = queryset.filter(user__crew_assignments__crew_id=crew_id, user__crew_assignments__end_date__isnull=True)    if employee_search:        queryset = queryset.filter(            Q(user__last_name__icontains=employee_search) | Q(user__first_name__icontains=employee_search)        )    if site_id:        queryset = queryset.filter(site_id=site_id).distinct()    if not request.user.is_staff:        queryset = queryset.filter(            Q(user__crew_assignments__crew__leader=request.user) & Q(user__crew_assignments__end_date__isnull=True)        ).distinct()    timeclock_entries = queryset.order_by('-clock_in')    # Create CSV response    response = HttpResponse(content_type='text/csv')    response['Content-Disposition'] = f'attachment; filename="{filename}"'    writer = csv.writer(response)    writer.writerow([        'Employee', 'Clock In', 'Clock Out', 'Hours Worked', 'Crew', 'Site',         'Hours Type', 'Shift', 'WC Code', 'Task Code', 'Job ID', 'Phase',         'Project No', 'Ticket No', 'Per Diem', 'Location', 'Supervisor',         'Non-Billable', 'Invoice No', 'Dept', 'Notes'    ])    for entry in timeclock_entries:        hours_worked = entry.hours_worked() if entry.clock_out else ''        writer.writerow([            f"{entry.user.last_name}, {entry.user.first_name}",            entry.clock_in,            entry.clock_out or '',            hours_worked,            entry.crew.name if entry.crew else '',            entry.site.name if entry.site else '',            entry.hours_type,            entry.shift,            entry.wc_code,            entry.task_code,            entry.job_id,            entry.phase,            entry.project_no,            entry.tkt_no,            entry.perdiem or '',            entry.location,            f"{entry.supervisor.last_name}, {entry.supervisor.first_name}" if entry.supervisor else '',            entry.non_bill,            entry.invoice_no,            entry.dept,            entry.notes        ])    return responsedef handle_employee_detail_post(request, user, context):    if 'upload_doc' in request.POST:        form = DocumentUploadForm(request.POST, request.FILES)        if form.is_valid():            doc = form.save(commit=False)            doc.application = EmploymentApplication.objects.get(id=request.POST.get('app_id'))            doc.save()    elif 'toggle_upload' in request.POST:        user.profile.can_upload_documents = not user.profile.can_upload_documents        user.profile.save()    elif 'upload_employee_form' in request.POST:        form = EmployeeFormUploadForm(request.POST, request.FILES)        if form.is_valid():            form_instance = form.save(commit=False)            form_instance.user = user            form_instance.uploaded_by = request.user            form_instance.save()    elif 'record_stat' in request.POST:        form = EmployeeStatForm(request.POST)        if form.is_valid():            stat = form.save(commit=False)            stat.user = user            stat.recorded_by = request.user            stat.save()    elif 'record_training' in request.POST:        form = TrainingRecordForm(request.POST)        if form.is_valid():            training = form.save(commit=False)            training.user = user            training.recorded_by = request.user            training.save()    elif 'upload_picture' in request.POST and 'picture' in request.FILES:        user.profile.picture = request.FILES['picture']        user.profile.save()    elif 'toggle_employee' in request.POST:        user.profile.is_employee = not user.profile.is_employee        user.profile.save()    elif 'toggle_active' in request.POST:        user.profile.is_active = not user.profile.is_active        user.profile.save()    elif 'generate_token' in request.POST:        SubmissionToken.objects.create(user=user)    return redirect('employee_detail', user_id=user.id)@login_requireddef employee_detail(request, user_id):    if not request.user.is_staff:        return redirect('home')    user = User.objects.get(id=user_id)    profile_form = ProfileEditForm(request.POST or None, instance=user.profile)    certification_form = EmployeeDetailCertificationForm(request.POST or None)    app = user.employmentapplication_set.first()    pdf_path = os.path.join(settings.MEDIA_ROOT, "pdfs", f"complete_application_{app.id}.pdf") if app else None  # Now /home/hradmin/media/pdfs/    pdf_url = f"{settings.MEDIA_URL}pdfs/complete_application_{app.id}.pdf" if pdf_path and os.path.exists(pdf_path) else None    context = {        'user': user,        'applications': EmploymentApplication.objects.filter(user=user),        'applicant_docs': ApplicantDocument.objects.filter(application__user=user),        'employee_forms': EmployeeForm.objects.filter(user=user),        'stats': EmployeeStat.objects.filter(user=user),        'certifications': EmployeeCertification.objects.filter(employee=user),        'hazard_reports': HazardReport.objects.filter(user=user),        'suggestions': Suggestion.objects.filter(user=user),        'timeclock_entries': Timeclock.objects.filter(user=user).order_by('-recorded_at')[:10],        'stats_totals': EmployeeStat.objects.filter(user=user).aggregate(            sick_days=Sum('hours', filter=Q(stat_type='sick')),            tardy_count=Sum('id', filter=Q(stat_type='tardy')),            overtime_hours=Sum('hours', filter=Q(stat_type='overtime')),            vacation_hours=Sum('hours', filter=Q(stat_type='vacation'))        ),        'form': DocumentUploadForm(),        'employee_form': EmployeeFormUploadForm(),        'stat_form': EmployeeStatForm(),        'certification_form': certification_form,        'submission_token': SubmissionToken.objects.filter(user=user, is_used=False, expires_at__gte=timezone.now()).order_by('-created_at').first(),        'profile_form': profile_form,        'today': timezone.now().date(),        'signed_pdf_url': pdf_url,    }    if request.method == 'POST':        if 'update_profile' in request.POST:            if profile_form.is_valid():                profile_form.save()                messages.success(request, "Profile updated successfully!")                return redirect('employee_detail', user_id=user.id)            else:                messages.error(request, "Failed to update profile. Check the form for errors.")        elif 'record_certification' in request.POST:            if certification_form.is_valid():                certification = certification_form.save(commit=False)                certification.employee = user                certification.save()                messages.success(request, "Certification recorded successfully!")                return redirect('employee_detail', user_id=user.id)            else:                messages.error(request, "Failed to record certification. Check the form for errors.")        elif 'renew_certification' in request.POST:            cert_id = request.POST.get('certification_id')            new_expiration_date = request.POST.get('new_expiration_date')            if cert_id and new_expiration_date:                try:                    certification = EmployeeCertification.objects.get(id=cert_id, employee=user)                    certification.expiration_date = new_expiration_date                    certification.save()                    messages.success(request, "Certification renewed successfully!")                except EmployeeCertification.DoesNotExist:                    messages.error(request, "Certification not found.")                except ValueError:                    messages.error(request, "Invalid expiration date.")                return redirect('employee_detail', user_id=user.id)            else:                messages.error(request, "Please provide a new expiration date.")        else:            return handle_employee_detail_post(request, user, context)    return render(request, 'hr/employee_detail.html', context)@login_requireddef third_party_submit(request, token):    token_obj = get_object_or_404(SubmissionToken, token=token, is_used=False, expires_at__gte=timezone.now())    if request.method == 'POST':        form = DocumentUploadForm(request.POST, request.FILES)        if form.is_valid():            doc = form.save(commit=False)            app, _ = EmploymentApplication.objects.get_or_create(user=token_obj.user)            doc.application = app            doc.description = form.cleaned_data['description'] or f"Third-party submission via token {token}"            doc.save()            token_obj.is_used = True            token_obj.save()            return render(request, 'hr/third_party_submit_success.html')    else:        form = DocumentUploadForm()    return render(request, 'hr/third_party_submit.html', {'form': form, 'token': token})@login_requireddef home(request):    if request.user.is_staff:        return redirect('staff_dashboard')        latest_timeclock = Timeclock.objects.filter(user=request.user).order_by('-recorded_at').first()    is_clocked_in = latest_timeclock and not latest_timeclock.clock_out    staff_message = StaffMessage.objects.first()    app = EmploymentApplication.objects.filter(user=request.user).first()    profile = Profile.objects.get(user=request.user)    map_link = None    form = TimeclockForm(request.POST or None, user=request.user)    if request.method == 'POST' and form.is_valid():        if is_clocked_in:            latest_timeclock.clock_out = timezone.now()            latest_timeclock.latitude = form.cleaned_data['latitude']            latest_timeclock.longitude = form.cleaned_data['longitude']            latest_timeclock.save()            map_link = f"https://www.google.com/maps?q={latest_timeclock.latitude},{latest_timeclock.longitude}"        else:            entry = form.save(commit=False)            entry.user = request.user            entry.clock_in = timezone.now()            entry.recorded_by = request.user            entry.latitude = form.cleaned_data['latitude']            entry.longitude = form.cleaned_data['longitude']            entry.save()            map_link = f"https://www.google.com/maps?q={entry.latitude},{entry.longitude}"        return render(request, 'hr/home.html', {            'is_clocked_in': not is_clocked_in,  # Updated status            'app': app,            'profile': profile,            'staff_message': staff_message,            'form': form,            'map_link': map_link,        })    return render(request, 'hr/home.html', {        'is_clocked_in': is_clocked_in,        'app': app,        'profile': profile,        'staff_message': staff_message,        'form': form,        'map_link': map_link,    })@login_requireddef staff_message(request):    if not request.user.is_staff:        return redirect('home')    latest_message = StaffMessage.objects.first()  # Get current message    if request.method == 'POST':        if 'delete_message' in request.POST:            if latest_message:                latest_message.delete()                messages.success(request, "Message cleared successfully!")            return redirect('staff_dashboard')        form = StaffMessageForm(request.POST)        if form.is_valid():            message = form.save(commit=False)            message.posted_by = request.user            message.save()            messages.success(request, "Message posted successfully!")            return redirect('staff_dashboard')    else:        form = StaffMessageForm()    return render(request, 'hr/staff_message.html', {'form': form, 'latest_message': latest_message})@login_requireddef update_application(request):    try:        app = EmploymentApplication.objects.get(user=request.user)    except EmploymentApplication.DoesNotExist:        return redirect('apply')    if request.method == 'POST':        form = EmploymentApplicationForm(request.POST, instance=app)        if form.is_valid():            form.save()            Signature.objects.filter(employment_application=app).delete()            return redirect('home')    else:        form = EmploymentApplicationForm(instance=app)    return render(request, 'hr/update_application.html', {'form': form})@login_required@login_requireddef apply(request):    if request.method == 'POST':        form = EmploymentApplicationForm(request.POST)        if form.is_valid():            application = form.save(commit=False)            application.user = request.user            application.save()            return redirect('sign_application')  # Changed from 'home'    else:        form = EmploymentApplicationForm()    return render(request, 'hr/apply.html', {'form': form})@login_requireddef sign_application(request):    try:        app = EmploymentApplication.objects.get(user=request.user)    except EmploymentApplication.DoesNotExist:        return redirect('apply')    has_signature = Signature.objects.filter(employment_application=app).exists()    if request.method == 'POST':        form = SignatureForm(request.POST)        if form.is_valid():            Signature.objects.filter(employment_application=app).delete()            signature = form.save(commit=False)            signature.employment_application = app            signature.save()            # Generate PDF            buffer = BytesIO()            p = canvas.Canvas(buffer, pagesize=letter)            p.setFont("Helvetica", 10)            y = 750            p.drawString(50, y, f"Employment Application - {app.user.username}")            y -= 15            p.drawString(50, y, f"Submitted: {app.submitted_at}")            y -= 15            fields = [                # Personal Info                f"Name: {app.user.first_name} {app.user.last_name}",                f"Email: {app.user.email}",                f"Date of Birth: {app.date_of_birth}",                f"Address Line 1: {app.address_line_1}",                f"Address Line 2: {app.address_line_2 or 'N/A'}",                f"City: {app.city}",                f"State: {app.get_state_display()}",                f"Zip Code: {app.zip_code}",                f"Country: {app.country}",                f"Phone: {app.user.profile.cell_number}",                f"Referred By: {app.referred_by or 'N/A'}",                f"Available to Start: {app.available_to_start}",                f"TWIC: {'Yes' if app.twic else 'No'}",                f"Position Applying For: {app.position_applying_for}",                f"Craft: {app.craft}",                f"Craft Other: {app.craft_other or 'N/A'}",                f"Served in Military: {'Yes' if app.served_in_military else 'No'}",                f"Military Branch: {app.military_branch or 'N/A'}",                f"US Citizen: {'Yes' if app.us_citizen else 'No'}",                f"Work Authorized: {'Yes' if app.work_authorized else 'No'}",                f"Worked Here Before: {'Yes' if app.worked_here_before else 'No'}",                f"Worked Here When: {app.worked_here_when or 'N/A'}",                f"Has Transportation: {'Yes' if app.has_transportation else 'No'}",                f"Has Felony: {'Yes' if app.has_felony else 'No'}",                f"Felony Explanation: {app.felony_explanation or 'N/A'}",                # Education                f"High School: {app.high_school}",                f"High School Address: {app.high_school_address}",                f"High School Graduated: {'Yes' if app.high_school_graduated else 'No'}",                f"High School Year: {app.high_school_year or 'N/A'}",                f"Other School: {app.other_school or 'N/A'}",                f"Other School Address: {app.other_school_address or 'N/A'}",                f"Other School Graduated: {'Yes' if app.other_school_graduated else 'No'}",                f"Other School Year: {app.other_school_year or 'N/A'}",                f"Skills/Training/Certifications: {app.skills_training_certs}",                # Job 1                f"Job 1 Company: {app.job_1_company}",                f"Job 1 Phone: {app.job_1_phone or 'N/A'}",                f"Job 1 Address: {app.job_1_address}",                f"Job 1 Supervisor: {app.job_1_supervisor}",                f"Job 1 Title: {app.job_1_title}",                f"Job 1 Start Salary: {app.job_1_start_salary}",                f"Job 1 End Salary: {app.job_1_end_salary}",                f"Job 1 Responsibilities: {app.job_1_responsibilities}",                f"Job 1 From: {app.job_1_from}",                f"Job 1 To: {app.job_1_to}",                f"Job 1 Reason for Leaving: {app.job_1_reason_for_leaving}",                f"Job 1 Contact Supervisor: {'Yes' if app.job_1_contact_supervisor else 'No'}",                # Job 2                f"Job 2 Company: {app.job_2_company or 'N/A'}",                f"Job 2 Phone: {app.job_2_phone or 'N/A'}",                f"Job 2 Address: {app.job_2_address or 'N/A'}",                f"Job 2 Supervisor: {app.job_2_supervisor or 'N/A'}",                f"Job 2 Title: {app.job_2_title or 'N/A'}",                f"Job 2 Start Salary: {app.job_2_start_salary or 'N/A'}",                f"Job 2 End Salary: {app.job_2_end_salary or 'N/A'}",                f"Job 2 Responsibilities: {app.job_2_responsibilities or 'N/A'}",                f"Job 2 From: {app.job_2_from or 'N/A'}",                f"Job 2 To: {app.job_2_to or 'N/A'}",                f"Job 2 Reason for Leaving: {app.job_2_reason_for_leaving or 'N/A'}",                f"Job 2 Contact Supervisor: {'Yes' if app.job_2_contact_supervisor else 'No'}",                # Job 3                f"Job 3 Company: {app.job_3_company or 'N/A'}",                f"Job 3 Phone: {app.job_3_phone or 'N/A'}",                f"Job 3 Address: {app.job_3_address or 'N/A'}",                f"Job 3 Supervisor: {app.job_3_supervisor or 'N/A'}",                f"Job 3 Title: {app.job_3_title or 'N/A'}",                f"Job 3 Start Salary: {app.job_3_start_salary or 'N/A'}",                f"Job 3 End Salary: {app.job_3_end_salary or 'N/A'}",                f"Job 3 Responsibilities: {app.job_3_responsibilities or 'N/A'}",                f"Job 3 From: {app.job_3_from or 'N/A'}",                f"Job 3 To: {app.job_3_to or 'N/A'}",                f"Job 3 Reason for Leaving: {app.job_3_reason_for_leaving or 'N/A'}",                f"Job 3 Contact Supervisor: {'Yes' if app.job_3_contact_supervisor else 'No'}",                # References                f"Reference 1 Name: {app.ref_1_name}",                f"Reference 1 Company: {app.ref_1_company}",                f"Reference 1 Address: {app.ref_1_address}",                f"Reference 1 Relationship: {app.ref_1_relationship}",                f"Reference 1 Phone: {app.ref_1_phone}",                f"Reference 2 Name: {app.ref_2_name}",                f"Reference 2 Company: {app.ref_2_company}",                f"Reference 2 Address: {app.ref_2_address}",                f"Reference 2 Relationship: {app.ref_2_relationship}",                f"Reference 2 Phone: {app.ref_2_phone}",                f"Reference 3 Name: {app.ref_3_name}",                f"Reference 3 Company: {app.ref_3_company}",                f"Reference 3 Address: {app.ref_3_address}",                f"Reference 3 Relationship: {app.ref_3_relationship}",                f"Reference 3 Phone: {app.ref_3_phone}",                # Other                f"Disclaimer Agreed: {'Yes' if app.disclaimer_agreed else 'No'}",                f"Email Sent: {'Yes' if app.email_sent else 'No'}",            ]            for field in fields:                # Split long fields (e.g., text fields) into multiple lines                if len(field) > 80:                    lines = [field[i:i+80] for i in range(0, len(field), 80)]                    for line in lines:                        p.drawString(50, y, line)                        y -= 15                        if y < 50:                            p.showPage()                            p.setFont("Helvetica", 10)                            y = 750                else:                    p.drawString(50, y, field)                    y -= 15                    if y < 50:                        p.showPage()                        p.setFont("Helvetica", 10)                        y = 750            if signature.signature_image and os.path.exists(signature.signature_image.path):                try:                    img = Image.open(signature.signature_image.path).convert('RGBA')                    bg = Image.new('RGB', img.size, (255, 255, 255))                    bg.paste(img, mask=img.split()[3])                    temp_path = os.path.join(settings.MEDIA_ROOT, 'temp', f"sig_{app.id}.png")                    os.makedirs(os.path.dirname(temp_path), exist_ok=True)                    bg.save(temp_path, 'PNG')                    if y < 100:                        p.showPage()                        y = 750                    p.drawImage(temp_path, 50, y - 75, width=150, height=75, preserveAspectRatio=True)                    os.remove(temp_path)                except Exception as e:                    p.drawString(50, y - 75, f"Signature unavailable: {str(e)}")            else:                p.drawString(50, y - 75, "No signature image provided")            p.showPage()            p.save()            buffer.seek(0)            filename = f"complete_application_{app.id}.pdf"            full_path = os.path.join(settings.MEDIA_ROOT, "pdfs", filename)            os.makedirs(os.path.dirname(full_path), exist_ok=True)            with open(full_path, 'wb') as f:                f.write(buffer.getvalue())            send_application_email.delay(app.id, "complete")            app.email_sent = True            app.save()            return redirect('home')    return render(request, 'hr/sign.html', {'form': SignatureForm(), 'has_signature': has_signature})@login_requireddef report_hazard(request):    if not request.user.is_staff and (not request.user.profile.is_employee or not request.user.profile.is_active):        logger.info(f"User {request.user.username} denied access to report_hazard - not an active employee")        return redirect('home')        if request.method == 'POST':        form = HazardReportForm(request.POST, request.FILES)        if form.is_valid():            hazard = form.save(commit=False)            hazard.user = request.user            hazard.save()            if hazard.photo:                resize_image.delay(hazard.photo.path)            logger.info(f"Hazard reported by user: {request.user.username}")            messages.success(request, "Hazard reported successfully!")            return redirect('home')        else:            logger.warning(f"Form invalid: {form.errors}")            messages.error(request, "Please correct the errors below.")    else:        form = HazardReportForm()    return render(request, 'hr/report_hazard.html', {'form': form})@login_requireddef hazard_report_detail(request, hazard_id):    if not request.user.is_staff:        return redirect('home')    hazard = get_object_or_404(HazardReport, id=hazard_id)    return render(request, 'hr/hazard_report_detail.html', {'hazard': hazard})@login_requireddef suggest(request):    if not request.user.is_staff and (not request.user.profile.is_employee or not request.user.profile.is_active):        logger.info(f"User {request.user.username} denied access to suggest - not an active employee")        return redirect('home')        if request.method == 'POST':        form = SuggestionForm(request.POST, current_user=request.user)        if form.is_valid():            form.save()            logger.info(f"Suggestion saved for user: {request.user.username}")            messages.success(request, "Suggestion submitted successfully!")            return redirect('home')        else:            logger.warning(f"Form invalid: {form.errors}")            messages.error(request, "Please correct the errors below.")    else:        form = SuggestionForm(current_user=request.user)    return render(request, 'hr/suggestion.html', {'form': form})@login_requireddef suggestion_detail(request, suggestion_id):    if not request.user.is_staff:        return redirect('home')    suggestion = get_object_or_404(Suggestion, id=suggestion_id)    return render(request, 'hr/suggestion_detail.html', {'suggestion': suggestion})@login_requireddef upload_picture(request):    if request.user.is_staff:        return redirect('staff_dashboard')    profile = request.user.profile    if request.method == 'POST':        form = ProfilePictureForm(request.POST, request.FILES, instance=profile)        if form.is_valid():            instance = form.save()            if instance.picture:                resize_image.delay(instance.picture.path)            return redirect('home')    else:        form = ProfilePictureForm(instance=profile)    return render(request, 'hr/upload_picture.html', {'form': form})def generate_application_pdf(request, app_id, complete=False):    if not request.user.is_staff:        return redirect('home')    app = EmploymentApplication.objects.get(id=app_id)    buffer = BytesIO()    p = canvas.Canvas(buffer, pagesize=letter)    p.setFont("Helvetica", 10)    title = f"{'Complete ' if complete else ''}Employment Application - {app.user.username}"    p.drawString(50, 750, title)    p.drawString(50, 735, f"Submitted: {app.submitted_at}")    y = 720    fields = [        (f"Name: {app.user.first_name} {app.user.last_name}", True),        (f"Email: {app.user.email}", True),        (f"Address: {app.address_line_1}, {app.city}, {app.state} {app.zip_code}", complete),        (f"Phone: {app.user.profile.cell_number}", complete),        (f"Position: {app.position_applying_for}", True),        (f"Available to Start: {app.available_to_start}", True),        (f"TWIC: {'Yes' if app.twic else 'No'}", True),        (f"Craft: {app.craft} {app.craft_other or ''}", True),        (f"US Citizen: {'Yes' if app.us_citizen else 'No'}", True),    ] + ([(f"DOB: {app.date_of_birth}", complete),          (f"Work Authorized: {'Yes' if app.work_authorized else 'No'}", complete),          (f"Transportation: {'Yes' if app.has_transportation else 'No'}", complete),          (f"Felony: {'Yes' if app.has_felony else 'No'} - {app.felony_explanation[:50] or ''}", complete)] if complete else [])    for text, show in fields:        if show:            p.drawString(50, y, text)            y -= 15    if complete and app.signature and app.signature.signature_image and os.path.exists(app.signature.signature_image.path):        try:            img = Image.open(app.signature.signature_image.path).convert('RGBA')            bg = Image.new('RGB', img.size, (255, 255, 255))            bg.paste(img, mask=img.split()[3])            temp_path = os.path.join(settings.MEDIA_ROOT, 'temp', f"sig_{app_id}.png")            os.makedirs(os.path.dirname(temp_path), exist_ok=True)            bg.save(temp_path, 'PNG')            p.drawImage(temp_path, 50, y - 75, width=150, height=75, preserveAspectRatio=True)            os.remove(temp_path)        except Exception:            p.drawString(50, y - 75, "Signature unavailable")    else:        p.drawString(50, y - 75, "No signature provided")    p.showPage()    p.save()    buffer.seek(0)    filename = f"{'complete_' if complete else 'basic_'}application_{app_id}.pdf"    full_path = os.path.join(settings.MEDIA_ROOT, "pdfs", filename)    os.makedirs(os.path.dirname(full_path), exist_ok=True)    with open(full_path, 'wb') as f:        f.write(buffer.getvalue())    return FileResponse(buffer, as_attachment=False, filename=filename)@login_requireddef view_application_pdf_basic(request, app_id):    return generate_application_pdf(request, app_id, complete=False)@login_requireddef view_application_pdf_complete(request, app_id):    return generate_application_pdf(request, app_id, complete=True)@login_requireddef bulk_renew_training(request):    if not request.user.is_staff:        return redirect('home')    today = timezone.now().date()    filter_form = SearchFilterForm(request.POST or request.GET or None)    trainings = EmployeeCertification.objects.filter(dismissed=False)    if filter_form.is_valid():        state = filter_form.cleaned_data.get('state')        crew = filter_form.cleaned_data.get('crew')        employee_search = filter_form.cleaned_data.get('employee_search')        site = filter_form.cleaned_data.get('site')        if state:            trainings = trainings.filter(employee__employmentapplication__state=state)        if crew:            trainings = trainings.filter(employee__crew_assignments__crew=crew, employee__crew_assignments__end_date__isnull=True)        if employee_search:            trainings = trainings.filter(                Q(employee__first_name__icontains=employee_search) |                Q(employee__last_name__icontains=employee_search) |                Q(employee__username__icontains=employee_search)            )        if site:            trainings = trainings.filter(employee__timeclock__site=site).distinct()    if request.method == 'POST':        training_ids = request.POST.getlist('training_ids')        expiration_date = request.POST.get('expiration_date')        if training_ids and expiration_date:            try:                updated_count = EmployeeCertification.objects.filter(                    id__in=training_ids                ).update(expiration_date=expiration_date)                messages.success(request, f"Updated {updated_count} certifications successfully!")            except ValueError as e:                logger.error(f"Invalid expiration date: {expiration_date}, error: {e}")                messages.error(request, "Invalid expiration date format.")            except Exception as e:                logger.error(f"Error updating certifications: {e}")                messages.error(request, "An error occurred while updating certifications.")            return redirect('bulk_renew_training')        else:            messages.error(request, "Please select at least one certification and provide a new expiration date.")    context = {        'filter_form': filter_form,        'trainings': trainings,        'today': today,    }    return render(request, 'hr/bulk_renew_training.html', context)@login_requireddef training_dashboard(request):    if not request.user.is_staff:        return redirect('home')    certifications = Certification.objects.all()    employee_certs = EmployeeCertification.objects.select_related('employee', 'certification').order_by('employee__last_name', 'employee__first_name')    jobsites = Jobsite.objects.prefetch_related('required_certifications')    eligibility_data = {}        for jobsite in jobsites:        required_certs = set(jobsite.required_certifications.all())        site_specific = jobsite.site_specific_training        eligible_employees = []        close_to_eligible = []        for employee in User.objects.filter(is_active=True):            emp_certs = set(EmployeeCertification.objects.filter(                employee=employee,                expiration_date__gte=timezone.now().date()            ).values_list('certification', flat=True))            has_site_specific = site_specific in [ec.certification.name for ec in EmployeeCertification.objects.filter(employee=employee)] if site_specific else True            missing_certs = required_certs - set(Certification.objects.filter(id__in=emp_certs))            if not missing_certs and has_site_specific:                eligible_employees.append(employee)            elif len(missing_certs) <= 2:                close_to_eligible.append((employee, missing_certs))        eligibility_data[jobsite.name] = {            'required': [cert.name for cert in required_certs] + ([site_specific] if site_specific else []),            'eligible': eligible_employees,            'close': close_to_eligible,        }    return render(request, 'hr/training_dashboard.html', {        'certifications': certifications,        'employee_certs': employee_certs,        'eligibility_data': eligibility_data,    })@login_requireddef performance_dashboard(request):    if not request.user.is_staff:        return redirect('home')    employees = User.objects.filter(profile__is_employee=True)    stats = EmployeeStat.objects.values('user__username').annotate(        sick=Sum('hours', filter=Q(stat_type='sick')),        overtime=Sum('hours', filter=Q(stat_type='overtime'))    )    return render(request, 'hr/performance_dashboard.html', {'employees': employees, 'stats': stats})