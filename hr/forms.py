# hr_app/hr/forms.pyfrom django import formsfrom django.db.models import Qfrom django.contrib.auth.forms import UserCreationFormfrom django.contrib.auth.models import Userfrom .models import Profile, Certification, EmployeeCertification, Jobsite, EmploymentApplication, Signature, ApplicantDocument, EmployeeForm, EmployeeStat, TrainingRecord, HazardReport, Suggestion, Timeclock, Crew, CrewAssignment, Site, Userfrom io import BytesIOfrom django.core.files.uploadedfile import InMemoryUploadedFileimport base64from .models import StaffMessageclass SearchFilterForm(forms.Form):    state = forms.ChoiceField(        choices=[('', 'All')],  # Fallback in case __init__ fails        required=False,        label="State",        widget=forms.Select(attrs={'class': 'form-control'})    )    crew = forms.ModelChoiceField(        queryset=Crew.objects.all(),        required=False,        empty_label='All Crews',        label="Crew",        widget=forms.Select(attrs={'class': 'form-control'})    )    employee_search = forms.CharField(        required=False,        label="Employee Search",        widget=forms.TextInput(attrs={'class': 'form-control'})    )    site = forms.ModelChoiceField(        queryset=Jobsite.objects.all(),        required=False,        empty_label='All Jobsites',        label="Jobsite",        widget=forms.Select(attrs={'class': 'form-control'})    )    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        # Explicitly set choices to STATE_CHOICES        self.fields['state'].choices = [('', 'All')] + EmploymentApplication.STATE_CHOICESclass CertificationForm(forms.ModelForm):    class Meta:        model = Certification        fields = ['name', 'description', 'duration_months']        widgets = {            'name': forms.TextInput(attrs={'class': 'form-control'}),            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 2}),            'duration_months': forms.NumberInput(attrs={'class': 'form-control'}),        }# hr/forms.pyclass EmployeeCertificationForm(forms.ModelForm):    class Meta:        model = EmployeeCertification        fields = ['employee', 'certification', 'completion_date', 'expiration_date']        widgets = {            'employee': forms.Select(attrs={'class': 'form-control', 'style': 'width: 250px;'}),            'certification': forms.Select(attrs={'class': 'form-control'}),            'completion_date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),            'expiration_date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),        }    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self.fields['employee'].queryset = User.objects.filter(is_active=True)        self.fields['employee'].label_from_instance = lambda obj: f"{obj.last_name}, {obj.first_name}"        self.fields['certification'].queryset = Certification.objects.all()        if self.instance and self.instance.id:            del self.fields['completion_date']            del self.fields['expiration_date']        else:            self.fields['completion_date'].required = Trueclass EmployeeDetailCertificationForm(forms.ModelForm):  # No inheritance from EmployeeCertificationForm    class Meta:        model = EmployeeCertification        fields = ['certification', 'completion_date', 'expiration_date']        widgets = {            'certification': forms.Select(attrs={'class': 'form-control'}),            'completion_date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),            'expiration_date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),        }    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)  # Calls forms.ModelForm.__init__        self.fields['certification'].queryset = Certification.objects.all()class JobsiteForm(forms.ModelForm):    class Meta:        model = Jobsite        fields = ['name', 'location', 'required_certifications', 'site_specific_training']        widgets = {            'name': forms.TextInput(attrs={'class': 'form-control'}),            'location': forms.TextInput(attrs={'class': 'form-control'}),            'required_certifications': forms.CheckboxSelectMultiple(attrs={'class': 'form-check-input'}),            'site_specific_training': forms.TextInput(attrs={'class': 'form-control'}),        }class ProfileEditForm(forms.ModelForm):    class Meta:        model = Profile        fields = ['middle_initial', 'employee_id', 'hire_date', 'pay_rate', 'termination_date', 'notes']        widgets = {            'middle_initial': forms.TextInput(attrs={'class': 'form-control', 'maxlength': 1}),            'employee_id': forms.TextInput(attrs={'class': 'form-control'}),            'hire_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),            'pay_rate': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),            'termination_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),            'notes': forms.Textarea(attrs={'rows': 4, 'class': 'form-control'}),        }class StaffMessageForm(forms.ModelForm):    class Meta:        model = StaffMessage        fields = ('message',)        widgets = {            'message': forms.Textarea(attrs={'rows': 4, 'class': 'form-control'}),        }class SignUpForm(UserCreationForm):    first_name = forms.CharField(max_length=30, required=True, help_text="Your first name")    last_name = forms.CharField(max_length=30, required=True, help_text="Your last name")    cell_number = forms.CharField(max_length=15, help_text="Format: 1234567890", required=True)    picture = forms.ImageField(required=False, help_text="Upload a profile picture (optional)")    class Meta:        model = User        fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2', 'cell_number', 'picture')    def save(self, commit=True):        user = super().save(commit=False)        user.first_name = self.cleaned_data['first_name']        user.last_name = self.cleaned_data['last_name']        if commit:            user.save()            Profile.objects.create(                user=user,                cell_number=self.cleaned_data['cell_number'],                picture=self.cleaned_data['picture']            )        return user# hr_app/hr/forms.pyclass CrewForm(forms.ModelForm):    class Meta:        model = Crew        fields = ['name', 'description', 'leader', 'default_site', 'state']        widgets = {            'name': forms.TextInput(attrs={'class': 'form-control'}),            'description': forms.Textarea(attrs={'class': 'form-control'}),            'leader': forms.Select(attrs={'class': 'form-control'}),            'default_site': forms.Select(attrs={'class': 'form-control'}),            'state': forms.Select(attrs={'class': 'form-control'}),        }    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self.fields['default_site'].queryset = Jobsite.objects.all()        self.fields['default_site'].required = False        self.fields['leader'].queryset = User.objects.filter(Q(is_staff=True) | Q(profile__is_crew_leader=True))        self.fields['leader'].label_from_instance = lambda obj: f"{obj.last_name}, {obj.first_name}"        self.fields['state'].required = False        self.fields['name'].required = False  # Make name optional for edits        self.fields['description'].required = False  # Already optional in model, but explicit hereclass SiteForm(forms.ModelForm):    class Meta:        model = Site        fields = ('name', 'state', 'address')        widgets = {            'state': forms.Select(),        }class CrewAssignmentForm(forms.ModelForm):    class Meta:        model = CrewAssignment        fields = ('employee', 'is_temporary', 'end_date')        widgets = {'end_date': forms.DateInput(attrs={'type': 'date'})}    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        # Show full name in employee dropdown, all users        self.fields['employee'].queryset = User.objects.all()        self.fields['employee'].label_from_instance = lambda obj: f"{obj.first_name} {obj.last_name}"class TrainingRecordForm(forms.ModelForm):    class Meta:        model = TrainingRecord        fields = ('training_type', 'completion_date', 'renewal_date', 'note')        widgets = {            'completion_date': forms.DateInput(attrs={'type': 'date'}),            'renewal_date': forms.DateInput(attrs={'type': 'date'}),        }class EmployeeStatForm(forms.ModelForm):    class Meta:        model = EmployeeStat        fields = ('stat_type', 'date', 'hours', 'note')        widgets = {'date': forms.DateInput(attrs={'type': 'date'})}class EmployeeFormUploadForm(forms.ModelForm):    class Meta:        model = EmployeeForm        fields = ('form_type', 'document', 'description')class DocumentUploadForm(forms.ModelForm):    class Meta:        model = ApplicantDocument        fields = ('document', 'description')ALL_US_STATES = [    ('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'),    ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'),    ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'),    ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'),    ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'),    ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'),    ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'),    ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'),    ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'),    ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'),    ('OF', 'Offshore'),  # Keep your custom option]class EmploymentApplicationForm(forms.ModelForm):    state = forms.ChoiceField(        choices=ALL_US_STATES,        widget=forms.Select(attrs={'class': 'form-control'}),        label="State"    )    class Meta:        model = EmploymentApplication        fields = (            'date_of_birth', 'address_line_1', 'address_line_2', 'city', 'state', 'zip_code', 'country',            'referred_by', 'available_to_start', 'twic', 'position_applying_for', 'craft', 'craft_other',            'served_in_military', 'military_branch', 'us_citizen', 'work_authorized',            'worked_here_before', 'worked_here_when', 'has_transportation', 'has_felony', 'felony_explanation',            'high_school', 'high_school_address', 'high_school_graduated', 'high_school_year',            'other_school', 'other_school_address', 'other_school_graduated', 'other_school_year',            'skills_training_certs',            'job_1_company', 'job_1_phone', 'job_1_address', 'job_1_supervisor', 'job_1_title',            'job_1_start_salary', 'job_1_end_salary', 'job_1_responsibilities', 'job_1_from', 'job_1_to',            'job_1_reason_for_leaving', 'job_1_contact_supervisor',            'job_2_company', 'job_2_phone', 'job_2_address', 'job_2_supervisor', 'job_2_title',            'job_2_start_salary', 'job_2_end_salary', 'job_2_responsibilities', 'job_2_from', 'job_2_to',            'job_2_reason_for_leaving', 'job_2_contact_supervisor',            'job_3_company', 'job_3_phone', 'job_3_address', 'job_3_supervisor', 'job_3_title',            'job_3_start_salary', 'job_3_end_salary', 'job_3_responsibilities', 'job_3_from', 'job_3_to',            'job_3_reason_for_leaving', 'job_3_contact_supervisor',            'ref_1_name', 'ref_1_company', 'ref_1_address', 'ref_1_relationship', 'ref_1_phone',            'ref_2_name', 'ref_2_company', 'ref_2_address', 'ref_2_relationship', 'ref_2_phone',            'ref_3_name', 'ref_3_company', 'ref_3_address', 'ref_3_relationship', 'ref_3_phone',            'disclaimer_agreed'        )        widgets = {            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),            'available_to_start': forms.DateInput(attrs={'type': 'date'}),            'job_1_from': forms.DateInput(attrs={'type': 'date'}),            'job_1_to': forms.DateInput(attrs={'type': 'date'}),            'job_2_from': forms.DateInput(attrs={'type': 'date'}),            'job_2_to': forms.DateInput(attrs={'type': 'date'}),            'job_3_from': forms.DateInput(attrs={'type': 'date'}),            'job_3_to': forms.DateInput(attrs={'type': 'date'}),            'high_school_address': forms.TextInput(attrs={'size': '40'}),            'other_school_address': forms.TextInput(attrs={'size': '40'}),            'job_1_address': forms.TextInput(attrs={'size': '40'}),            'job_2_address': forms.TextInput(attrs={'size': '40'}),            'job_3_address': forms.TextInput(attrs={'size': '40'}),        }class SignatureForm(forms.ModelForm):    signature_image = forms.CharField(widget=forms.HiddenInput(), required=True)    class Meta:        model = Signature        fields = ('signature_image',)    def save(self, commit=True):        instance = super().save(commit=False)        data = self.cleaned_data['signature_image']        if data.startswith('data:image/png;base64,'):            img_data = base64.b64decode(data.split(',')[1])            img_file = BytesIO(img_data)            instance.signature_image = InMemoryUploadedFile(                img_file, None, f"signature_{instance.employment_application_id or 'new'}.png",                'image/png', len(img_data), None            )        if commit:            instance.save()        return instanceclass HazardReportForm(forms.ModelForm):    class Meta:        model = HazardReport        fields = ('hazard_type', 'description', 'photo')class SuggestionForm(forms.ModelForm):    class Meta:        model = Suggestion        fields = ['suggestion_text']    def __init__(self, *args, **kwargs):        self.current_user = kwargs.pop('current_user', None)        super().__init__(*args, **kwargs)    def save(self, commit=True):        suggestion = super().save(commit=False)        if self.current_user and self.current_user.is_authenticated:            suggestion.user = self.current_user        if commit:            suggestion.save()        return suggestionclass TimeclockForm(forms.ModelForm):    site = forms.ModelChoiceField(queryset=Site.objects.all(), required=False)    crew = forms.ModelChoiceField(queryset=Crew.objects.all(), required=False)    state_filter = forms.ChoiceField(        choices=[('', 'All States')] + EmploymentApplication.STATE_CHOICES,        required=False,        label="Filter Sites by State"    )    site_search = forms.CharField(        max_length=100,        required=False,        label="Search Sites",        widget=forms.TextInput(attrs={'placeholder': 'Enter site name...'})    )    class Meta:        model = Timeclock        fields = ('crew', 'site', 'latitude', 'longitude')        widgets = {            'latitude': forms.HiddenInput(),            'longitude': forms.HiddenInput(),        }    def __init__(self, *args, **kwargs):        user = kwargs.pop('user', None)        super().__init__(*args, **kwargs)        try:            if user and hasattr(user, 'profile') and user.profile and user.profile.primary_crew:                self.fields['crew'].initial = user.profile.primary_crew        except AttributeError:            pass  # Silently skip if no profile exists        if 'state_filter' in self.data and self.data['state_filter']:            self.fields['site'].queryset = Site.objects.filter(state=self.data['state_filter'])        if 'site_search' in self.data and self.data['site_search']:            self.fields['site'].queryset = self.fields['site'].queryset.filter(name__icontains=self.data['site_search'])        if self.data.get('latitude'):            self.data = self.data.copy()            try:                self.data['latitude'] = str(round(float(self.data['latitude']), 6))                self.data['longitude'] = str(round(float(self.data['longitude']), 6))            except (ValueError, TypeError):                passclass ManualTimeclockForm(forms.ModelForm):    class Meta:        model = Timeclock        fields = ('user', 'site', 'crew', 'clock_in', 'clock_out')        widgets = {            'user': forms.Select(attrs={'class': 'form-control'}),            'site': forms.Select(attrs={'class': 'form-control'}),            'crew': forms.Select(attrs={'class': 'form-control'}),            'clock_in': forms.DateTimeInput(attrs={'type': 'datetime-local', 'class': 'form-control'}),            'clock_out': forms.DateTimeInput(attrs={'type': 'datetime-local', 'class': 'form-control'}),        }    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        # Filter users to active employees        self.fields['user'].queryset = User.objects.filter(profile__is_employee=True, is_active=True)        self.fields['user'].label_from_instance = lambda obj: f"{obj.last_name}, {obj.first_name}"        # Use Jobsite as per Timeclock model (not Site)        self.fields['site'].queryset = Jobsite.objects.all()        self.fields['crew'].queryset = Crew.objects.all()        # Make clock_out optional (e.g., for ongoing shifts)        self.fields['clock_out'].required = False    def clean(self):        cleaned_data = super().clean()        clock_in = cleaned_data.get('clock_in')        clock_out = cleaned_data.get('clock_out')        if clock_out and clock_in and clock_out <= clock_in:            raise forms.ValidationError("Clock out must be after clock in.")        return cleaned_dataclass TimeclockReportForm(forms.Form):    employees = forms.ModelMultipleChoiceField(        queryset=User.objects.all(),        widget=forms.CheckboxSelectMultiple,        required=False    )    crews = forms.ModelMultipleChoiceField(        queryset=Crew.objects.all(),        widget=forms.CheckboxSelectMultiple,        required=False    )    start_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))    end_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))    def __init__(self, *args, **kwargs):        employees = kwargs.pop('employees', None)        super().__init__(*args, **kwargs)        if employees is not None:            self.fields['employees'].queryset = employeesclass ProfilePictureForm(forms.ModelForm):    class Meta:        model = Profile        fields = ('picture',)        widgets = {            'picture': forms.FileInput(attrs={'accept': 'image/*', 'capture': 'environment'})        }class BulkRenewTrainingFilterForm(forms.Form):    state = forms.ChoiceField(        choices=[('', 'All States')] + EmploymentApplication.STATE_CHOICES,        required=False,        label="Filter by State"    )    crew = forms.ModelChoiceField(        queryset=Crew.objects.all(),        required=False,        label="Filter by Crew",        empty_label="All Crews"    )    employee_search = forms.CharField(        max_length=100,        required=False,        label="Search Employees",        widget=forms.TextInput(attrs={'placeholder': 'Enter name or leave blank', 'class': 'form-control'})    )    site = forms.ModelChoiceField(        queryset=Site.objects.all(),        required=False,        label="Filter by Site",        empty_label="All Sites"    )