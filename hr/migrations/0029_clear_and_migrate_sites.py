# Generated by Django 5.1.6 on 2025-03-18 02:20

# hr_app/hr/migrations/0029_clear_and_migrate_sites.py
from django.db import migrations
import django.db.models

def clear_and_migrate_sites(apps, schema_editor):
    Timeclock = apps.get_model('hr', 'Timeclock')
    Crew = apps.get_model('hr', 'Crew')
    TrainingRecord = apps.get_model('hr', 'TrainingRecord')
    Jobsite = apps.get_model('hr', 'Jobsite')
    Site = apps.get_model('hr', 'Site')

    # Step 1: Nullify invalid IDs
    valid_jobsite_ids = set(Jobsite.objects.values_list('id', flat=True))
    Timeclock.objects.exclude(site_id__in=valid_jobsite_ids).update(site=None)
    Crew.objects.exclude(default_site_id__in=valid_jobsite_ids).update(default_site=None)
    TrainingRecord.objects.exclude(site_id__in=valid_jobsite_ids).update(site=None)

    # Step 2: Migrate valid Site IDs to Jobsite (optional, since test data)
    valid_site_ids = set(Site.objects.values_list('id', flat=True))
    for timeclock in Timeclock.objects.filter(site_id__in=valid_site_ids):
        try:
            old_site = Site.objects.get(id=timeclock.site_id)
            jobsite, _ = Jobsite.objects.get_or_create(
                name=old_site.name,
                defaults={'location': old_site.address}
            )
            timeclock.site = jobsite
            timeclock.save()
        except Site.DoesNotExist:
            timeclock.site = None
            timeclock.save()

    for crew in Crew.objects.filter(default_site_id__in=valid_site_ids):
        try:
            old_site = Site.objects.get(id=crew.default_site_id)
            jobsite, _ = Jobsite.objects.get_or_create(
                name=old_site.name,
                defaults={'location': old_site.address}
            )
            crew.default_site = jobsite
            crew.save()
        except Site.DoesNotExist:
            crew.default_site = None
            crew.save()

    for record in TrainingRecord.objects.filter(site_id__in=valid_site_ids):
        try:
            old_site = Site.objects.get(id=record.site_id)
            jobsite, _ = Jobsite.objects.get_or_create(
                name=old_site.name,
                defaults={'location': old_site.address}
            )
            record.site = jobsite
            record.save()
        except Site.DoesNotExist:
            record.site = None
            record.save()

class Migration(migrations.Migration):
    dependencies = [('hr', '0028_alter_certification_options_and_more')]  # Replace with your exact 0028 migration name
    operations = [
        migrations.RunPython(clear_and_migrate_sites),
        migrations.AlterField(
            model_name='timeclock',
            name='site',
            field=django.db.models.ForeignKey(
                'Jobsite',
                on_delete=django.db.models.SET_NULL,
                null=True,
                blank=True
            ),
        ),
        migrations.AlterField(
            model_name='trainingrecord',
            name='site',
            field=django.db.models.ForeignKey(
                'Jobsite',
                on_delete=django.db.models.SET_NULL,
                null=True,
                blank=True
            ),
        ),
    ]