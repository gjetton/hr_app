# hr_app/hr/models.pyfrom django.db import modelsfrom django.contrib.auth.models import Userfrom django.core.validators import RegexValidatorimport uuidfrom django.utils import timezonefrom datetime import timedeltafrom datetime import datetimefrom calendar import monthrangeclass StaffMessage(models.Model):    message = models.TextField()    posted_by = models.ForeignKey('auth.User', on_delete=models.SET_NULL, null=True)    posted_at = models.DateTimeField(default=timezone.now)    class Meta:        ordering = ['-posted_at']class SubmissionToken(models.Model):    token = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)    user = models.ForeignKey(User, on_delete=models.CASCADE)    created_at = models.DateTimeField(auto_now_add=True)    expires_at = models.DateTimeField()    is_used = models.BooleanField(default=False)    def save(self, *args, **kwargs):        if not self.expires_at:            self.expires_at = timezone.now() + timedelta(days=7)        super().save(*args, **kwargs)    def __str__(self):        return f"Token for {self.user.username} - {self.token}"class Site(models.Model):    name = models.CharField(max_length=100)    state = models.CharField(max_length=2, choices=[        ('AL', 'Alabama'), ('AR', 'Arkansas'), ('FL', 'Florida'), ('LA', 'Louisiana'),        ('MS', 'Mississippi'), ('NC', 'North Carolina'), ('OK', 'Oklahoma'), ('TX', 'Texas'), ('OF', 'Offshore')    ])    address = models.TextField(blank=True)    def __str__(self):        return f"{self.name} ({self.state})"class Profile(models.Model):    user = models.OneToOneField(User, on_delete=models.CASCADE)    picture = models.ImageField(upload_to='profile_pics/', blank=True, null=True)    cell_number = models.CharField(max_length=20, blank=True)    is_employee = models.BooleanField(default=False)    is_active = models.BooleanField(default=True)    can_upload_documents = models.BooleanField(default=False)    is_crew_leader = models.BooleanField(default=False)    hire_date = models.DateField(blank=True, null=True)    pay_rate = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)    middle_initial = models.CharField(max_length=1, blank=True)    employee_id = models.CharField(max_length=20, blank=True, null=True, unique=True)    termination_date = models.DateField(blank=True, null=True)    notes = models.TextField(blank=True)    def __str__(self):        return self.user.usernameclass Jobsite(models.Model):    name = models.CharField(max_length=100, unique=True)    location = models.CharField(max_length=200, blank=True, null=True)    required_certifications = models.ManyToManyField('Certification', related_name="jobsites", blank=True)    site_specific_training = models.CharField(max_length=200, blank=True, null=True, help_text="Custom training required for this site")    def __str__(self):        return self.name# hr_app/hr/models.pyclass Crew(models.Model):    name = models.CharField(max_length=100, unique=True)    description = models.TextField(blank=True)    leader = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='led_crews')    default_site = models.ForeignKey('Jobsite', on_delete=models.SET_NULL, null=True, blank=True)    state = models.CharField(  # New field for operational state        max_length=2,        choices=[            ('AL', 'Alabama'), ('AR', 'Arkansas'), ('FL', 'Florida'), ('LA', 'Louisiana'),            ('MS', 'Mississippi'), ('NC', 'North Carolina'), ('OK', 'Oklahoma'), ('TX', 'Texas'),            ('OF', 'Offshore'),        ],        blank=True,        null=True,        help_text="State where this crew operates"    )    def __str__(self):        return self.nameclass CrewAssignment(models.Model):    employee = models.ForeignKey(User, on_delete=models.CASCADE, related_name='crew_assignments')    crew = models.ForeignKey(Crew, on_delete=models.CASCADE, related_name='assignments')    assigned_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)    assigned_at = models.DateTimeField(auto_now_add=True)    is_temporary = models.BooleanField(default=False)    end_date = models.DateField(null=True, blank=True)    def __str__(self):        return f"{self.employee.username} - {self.crew.name}"class EmployeeStat(models.Model):    STAT_TYPES = [        ('sick', 'Sick Day'), ('tardy', 'Tardiness'), ('overtime', 'Overtime'), ('vacation', 'Vacation'),    ]    user = models.ForeignKey(User, on_delete=models.CASCADE)    stat_type = models.CharField(max_length=20, choices=STAT_TYPES)    date = models.DateField()    hours = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)    note = models.TextField(blank=True)    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='recorded_stats')    recorded_at = models.DateTimeField(auto_now_add=True)    def __str__(self):        return f"{self.stat_type} for {self.user.username} on {self.date}"class Perdiem(models.Model):    data_entry = models.CharField(max_length=2, blank=True)    description = models.CharField(max_length=200, blank=True)    ticket_no = models.CharField(max_length=20, blank=True)    date = models.DateField()    job_id = models.CharField(max_length=20, blank=True)    job_no = models.CharField(max_length=20, blank=True)    phase = models.CharField(max_length=20, blank=True)    type = models.CharField(max_length=50, blank=True)    employee_id = models.CharField(max_length=20, blank=True)    employee_name = models.CharField(max_length=100, blank=True)    pr_date = models.DateField(blank=True, null=True)    days = models.IntegerField(default=1)    cost = models.DecimalField(max_digits=10, decimal_places=2)    total = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)    notes = models.TextField(blank=True)    def save(self, *args, **kwargs):        if not self.total:            self.total = self.cost * self.days        super().save(*args, **kwargs)    def __str__(self):        return f"{self.employee_name} - {self.date}"class Auto(models.Model):    data_entry = models.CharField(max_length=2, blank=True)    description = models.CharField(max_length=200, blank=True)    tkt_no = models.CharField(max_length=20, blank=True)    date = models.DateField()    job_id = models.CharField(max_length=20, blank=True)    job_no = models.CharField(max_length=20, blank=True)    phase = models.CharField(max_length=20, blank=True)    type = models.CharField(max_length=50, blank=True)    emp_id = models.CharField(max_length=20, blank=True)    employee_name = models.CharField(max_length=100, blank=True)    pr_date = models.DateField(blank=True, null=True)    days = models.IntegerField(default=1)    cost = models.DecimalField(max_digits=10, decimal_places=2)    total = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)    def save(self, *args, **kwargs):        if not self.total:            self.total = self.cost * self.days        super().save(*args, **kwargs)    def __str__(self):        return f"{self.employee_name} - {self.date}"class HazardReport(models.Model):    HAZARD_TYPES = [        ('safety', 'Safety'), ('equipment', 'Equipment'), ('environmental', 'Environmental'), ('other', 'Other'),    ]    user = models.ForeignKey(User, on_delete=models.CASCADE)    hazard_type = models.CharField(max_length=20, choices=HAZARD_TYPES)    description = models.TextField()    photo = models.ImageField(upload_to='hazard_photos/', null=True, blank=True)    reported_at = models.DateTimeField(auto_now_add=True)    is_silenced = models.BooleanField(default=False)    def __str__(self):        return f"{self.hazard_type} report by {self.user.username}"class Suggestion(models.Model):    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)    suggestion_text = models.TextField()    submitted_at = models.DateTimeField(auto_now_add=True)    is_silenced = models.BooleanField(default=False)    def __str__(self):        return f"Suggestion by {self.user.username if self.user else 'Anonymous'} at {self.submitted_at}"class EmploymentApplication(models.Model):    user = models.ForeignKey(User, on_delete=models.CASCADE)    date_of_birth = models.DateField()    address_line_1 = models.CharField(max_length=200)    address_line_2 = models.CharField(max_length=200, blank=True)    city = models.CharField(max_length=100)    STATE_CHOICES = [        ('AL', 'Alabama'), ('AR', 'Arkansas'), ('FL', 'Florida'), ('LA', 'Louisiana'),        ('MS', 'Mississippi'), ('NC', 'North Carolina'), ('OK', 'Oklahoma'), ('TX', 'Texas'), ('OF', 'Offshore'),    ]    state = models.CharField(max_length=2, choices=STATE_CHOICES)    zip_code = models.CharField(max_length=20)    country = models.CharField(max_length=100, default='United States')    referred_by = models.CharField(max_length=100, blank=True)    available_to_start = models.DateField()    twic = models.BooleanField(default=False)    POSITION_CHOICES = [('Onshore', 'Onshore'), ('Offshore', 'Offshore'), ('Both', 'Both')]    position_applying_for = models.CharField(max_length=20, choices=POSITION_CHOICES)    CRAFT_CHOICES = [        ('Scaffold', 'Scaffold'), ('Painter/Blaster', 'Painter/Blaster'),        ('Insulation', 'Insulation'), ('Helper', 'Helper'), ('Other', 'Other')    ]    craft = models.CharField(max_length=20, choices=CRAFT_CHOICES)    craft_other = models.CharField(max_length=100, blank=True)    served_in_military = models.BooleanField(default=False)    military_branch = models.CharField(max_length=100, blank=True)    us_citizen = models.BooleanField(default=True)    work_authorized = models.BooleanField(default=False)    worked_here_before = models.BooleanField(default=False)    worked_here_when = models.CharField(max_length=100, blank=True)    has_transportation = models.BooleanField(default=False)    has_felony = models.BooleanField(default=False)    felony_explanation = models.TextField(blank=True)    high_school = models.CharField(max_length=200)    high_school_address = models.TextField()    high_school_graduated = models.BooleanField(default=False)    high_school_year = models.CharField(max_length=4, blank=True)    other_school = models.CharField(max_length=200, blank=True)    other_school_address = models.TextField(blank=True)    other_school_graduated = models.BooleanField(default=False)    other_school_year = models.CharField(max_length=4, blank=True)    skills_training_certs = models.TextField()    job_1_company = models.CharField(max_length=200)    job_1_phone = models.CharField(max_length=15, blank=True)    job_1_address = models.TextField()    job_1_supervisor = models.CharField(max_length=100)    job_1_title = models.CharField(max_length=100)    job_1_start_salary = models.CharField(max_length=50)    job_1_end_salary = models.CharField(max_length=50)    job_1_responsibilities = models.TextField()    job_1_from = models.DateField()    job_1_to = models.DateField()    job_1_reason_for_leaving = models.TextField()    job_1_contact_supervisor = models.BooleanField(default=False)    job_2_company = models.CharField(max_length=200, blank=True)    job_2_phone = models.CharField(max_length=15, blank=True)    job_2_address = models.TextField(blank=True)    job_2_supervisor = models.CharField(max_length=100, blank=True)    job_2_title = models.CharField(max_length=100, blank=True)    job_2_start_salary = models.CharField(max_length=50, blank=True)    job_2_end_salary = models.CharField(max_length=50, blank=True)    job_2_responsibilities = models.TextField(blank=True)    job_2_from = models.DateField(null=True, blank=True)    job_2_to = models.DateField(null=True, blank=True)    job_2_reason_for_leaving = models.TextField(blank=True)    job_2_contact_supervisor = models.BooleanField(default=False)    job_3_company = models.CharField(max_length=200, blank=True)    job_3_phone = models.CharField(max_length=15, blank=True)    job_3_address = models.TextField(blank=True)    job_3_supervisor = models.CharField(max_length=100, blank=True)    job_3_title = models.CharField(max_length=100, blank=True)    job_3_start_salary = models.CharField(max_length=50, blank=True)    job_3_end_salary = models.CharField(max_length=50, blank=True)    job_3_responsibilities = models.TextField(blank=True)    job_3_from = models.DateField(null=True, blank=True)    job_3_to = models.DateField(null=True, blank=True)    job_3_reason_for_leaving = models.TextField(blank=True)    job_3_contact_supervisor = models.BooleanField(default=False)    ref_1_name = models.CharField(max_length=100)    ref_1_company = models.CharField(max_length=200)    ref_1_address = models.TextField()    ref_1_relationship = models.CharField(max_length=100)    ref_1_phone = models.CharField(max_length=15)    ref_2_name = models.CharField(max_length=100)    ref_2_company = models.CharField(max_length=200)    ref_2_address = models.TextField()    ref_2_relationship = models.CharField(max_length=100)    ref_2_phone = models.CharField(max_length=15)    ref_3_name = models.CharField(max_length=100)    ref_3_company = models.CharField(max_length=200)    ref_3_address = models.TextField()    ref_3_relationship = models.CharField(max_length=100)    ref_3_phone = models.CharField(max_length=15)    disclaimer_agreed = models.BooleanField(default=False)    submitted_at = models.DateTimeField(auto_now_add=True)    email_sent = models.BooleanField(default=False)    def __str__(self):        return f"{self.user.username}'s application"class Signature(models.Model):    employment_application = models.OneToOneField('EmploymentApplication', on_delete=models.CASCADE)    signature_image = models.ImageField(upload_to='signatures/')    signed_at = models.DateTimeField(auto_now_add=True)    def __str__(self):        return f"Signature for {self.employment_application}"class ApplicantDocument(models.Model):    application = models.ForeignKey('EmploymentApplication', on_delete=models.CASCADE)    document = models.FileField(upload_to='documents/')    uploaded_at = models.DateTimeField(auto_now_add=True)    description = models.CharField(max_length=255, blank=True)    def __str__(self):        return f"Document for {self.application} - {self.description}"class EmployeeForm(models.Model):    FORM_TYPES = [        ('discipline', 'Discipline'), ('accomplishment', 'Accomplishment'),        ('review', 'Review'), ('other', 'Other'),    ]    user = models.ForeignKey(User, on_delete=models.CASCADE)    form_type = models.CharField(max_length=20, choices=FORM_TYPES)    document = models.FileField(upload_to='employee_forms/')    uploaded_at = models.DateTimeField(auto_now_add=True)    description = models.CharField(max_length=255, blank=True)    uploaded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='uploaded_forms')    def __str__(self):        return f"{self.form_type} for {self.user.username} by {self.uploaded_by.username}"class TrainingRecord(models.Model):    user = models.ForeignKey(User, on_delete=models.CASCADE)    training_type = models.CharField(max_length=100)    completion_date = models.DateField()    renewal_date = models.DateField(null=True, blank=True)    note = models.TextField(blank=True)    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='recorded_trainings')    recorded_at = models.DateTimeField(auto_now_add=True)    site = models.ForeignKey(Jobsite, on_delete=models.SET_NULL, null=True, blank=True)  # Updated to Jobsiteclass Certification(models.Model):    name = models.CharField(max_length=100)    description = models.TextField()    duration_months = models.IntegerField()    is_site_specific = models.BooleanField(default=False)    def __str__(self):        return self.nameclass EmployeeCertification(models.Model):    employee = models.ForeignKey(User, on_delete=models.CASCADE)    certification = models.ForeignKey(Certification, on_delete=models.CASCADE)    completion_date = models.DateField()    expiration_date = models.DateField(null=True, blank=True)    dismissed = models.BooleanField(default=False)    def save(self, *args, **kwargs):        if not self.id and self.completion_date and self.certification.duration_months:            years = self.certification.duration_months // 12            months = self.certification.duration_months % 12            new_year = self.completion_date.year + years            new_month = self.completion_date.month + months            if new_month > 12:                new_year += 1                new_month -= 12            max_day = monthrange(new_year, new_month)[1]            new_day = min(self.completion_date.day, max_day)            self.expiration_date = datetime(new_year, new_month, new_day).date()        super().save(*args, **kwargs)    def is_valid(self):        """Return True if certification is not expired or has no expiration."""        from django.utils import timezone        today = timezone.now().date()        return self.expiration_date is None or self.expiration_date > today    def __str__(self):        return f"{self.employee.username} - {self.certification.name}"class Timeclock(models.Model):    user = models.ForeignKey(User, on_delete=models.CASCADE)    crew = models.ForeignKey(Crew, on_delete=models.SET_NULL, null=True, blank=True)    site = models.ForeignKey(Jobsite, on_delete=models.SET_NULL, null=True, blank=True)    clock_in = models.DateTimeField()    clock_out = models.DateTimeField(null=True, blank=True)    latitude = models.FloatField(null=True, blank=True)    longitude = models.FloatField(null=True, blank=True)    recorded_at = models.DateTimeField(auto_now_add=True)    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='recorded_timeclocks')    HOURS_TYPE_CHOICES = [        ('regular', 'Regular'),        ('ot1', 'Overtime 1'),    ]    hours_type = models.CharField(max_length=7, choices=HOURS_TYPE_CHOICES, default='regular')    shift = models.CharField(max_length=50, blank=True)    wc_code = models.CharField(max_length=10, blank=True)    task_code = models.CharField(max_length=20, blank=True)    job_id = models.CharField(max_length=20, blank=True)    phase = models.CharField(max_length=20, blank=True)    project_no = models.CharField(max_length=50, blank=True)    tkt_no = models.CharField(max_length=20, blank=True)    perdiem = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)    location = models.CharField(max_length=100, blank=True)    supervisor = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='supervised_timeclocks')    non_bill = models.CharField(max_length=1, choices=[('', 'Blank'), ('y', 'Yes')], blank=True, default='')    invoice_no = models.CharField(max_length=20, blank=True)    dept = models.CharField(max_length=2, blank=True)    notes = models.TextField(blank=True)    def hours_worked(self):        if self.clock_in and self.clock_out:            return (self.clock_out - self.clock_in).total_seconds() / 3600        return None